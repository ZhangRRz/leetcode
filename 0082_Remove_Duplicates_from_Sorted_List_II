/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head == nullptr || head -> next == nullptr ) return head;
    
        ListNode* beforehead = new ListNode((head -> val) -1,head);
        ListNode* pre = beforehead;
        ListNode* now = beforehead -> next;

        while(now){
            if(now -> next == nullptr || now -> val != now -> next ->val){
                pre = pre -> next;
                    
            }
            else{//next one is the same
                while(now -> next != nullptr && now -> val == (now -> next) ->val)
                    now = now -> next;
                // check the last one of the list
                pre -> next = now -> next;
            }
            now = now -> next;
      
        }
        return beforehead -> next;
    }
};
